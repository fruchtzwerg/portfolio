---
import IconMoon from '~icons/carbon/moon';
import IconSun from '~icons/carbon/sun';

interface Props {
  class: string;
}

const { class: className } = Astro.props as Props;
---

<!-- Calculate current theme first -->
<script is:inline>
  const mediaDark = matchMedia('(prefers-color-scheme: dark)');
  const isDark =
    localStorage.theme === 'arcane' || (!('theme' in localStorage) && mediaDark.matches);

  function setTheme(isDark) {
    localStorage.theme = document.documentElement.dataset.theme = isDark ? 'arcane' : 'winter';
  }

  setTheme(isDark);
</script>

<!-- Init the component -->
<button
  is="app-theme-selector"
  class:list={[className, 'swap swap-rotate']}
  aria-label="Switch theme"
>
  <IconSun class="swap-on fill-current text-lg sm:text-2xl" />
  <IconMoon class="swap-off fill-current text-lg sm:text-2xl" />
</button>

<!-- Set theme immediatly -->
<script is:inline>
  // eslint-disable-next-line no-undef
  if (isDark) document.querySelector('[is=app-theme-selector]')?.classList.add('swap-active');
</script>

<!-- Register event listeners -->
<script>
  declare function setTheme(isDark: boolean): void;
  declare const mediaDark: MediaQueryList;

  class AppThemeSelector extends HTMLButtonElement {
    constructor() {
      super();

      mediaDark.onchange = e => {
        requestAnimationFrame(() => {
          setTheme(e.matches);
          this.setActive(e.matches);
        });
      };

      this.addEventListener('click', this.toggleTheme.bind(this));
    }

    public setActive(isDark: boolean) {
      const action = isDark ? 'add' : 'remove';
      this.classList[action]('swap-active');
    }

    public toggleTheme() {
      const isDark = localStorage.theme === 'arcane';

      setTheme(!isDark);
      this.setActive(!isDark);
    }
  }

  customElements.define('app-theme-selector', AppThemeSelector, { extends: 'button' });
</script>
