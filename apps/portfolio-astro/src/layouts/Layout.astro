---
import type { MDXLayoutProps } from 'astro';
import { SEO } from 'astro-seo';

import BottomNav from '../components/BottomNav.astro';
import Footer from '../components/Footer.astro';
import Navbar from '../components/Navbar.astro';

import '../styles/bg-gradient.scss';

interface HTMLProps {
  title: string;
  prose?: boolean;
}

type Props = HTMLProps & Partial<MDXLayoutProps<HTMLProps>> & Parameters<typeof SEO>[number];

const NAME = 'B. Montazer';
const TITLE = 'Senior Frontend Engineer';
const DESCRIPTION_SHORT = 'Frontend Excellence with Passion. Engineering & Architecture';
const DESCRIPTION =
  'Excellence in frontend software engineering and architecture. Real world experience from Micro Frontends to large-scale applications.';

const {
  title = TITLE,
  prose,
  description = DESCRIPTION,
  canonical = Astro.site?.href,
} = { ...Astro.props, ...Astro.props.frontmatter } as Props;

const capitalize = (value: string) =>
  value
    .split(' ')
    .map(part => [part[0].toUpperCase(), part.slice(1).toLocaleLowerCase()].join(''))
    .join(' ');

const getTitle = (t = title) => `${NAME} | ${capitalize(t)}`;
---

<!DOCTYPE html>
<html lang="en" class="bg-base-300">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />

    <SEO
      title={getTitle()}
      description={description}
      canonical={canonical}
      openGraph={{
        basic: {
          title: getTitle(TITLE),
          image: `/avatar.png`,
          type: 'profile',
          url: canonical,
        },
        image: {
          alt: 'Headshot of Benjamin Montazer.',
        },
        optional: {
          description: DESCRIPTION_SHORT,
        },
      }}
      extend={{
        link: [{ rel: 'icon', href: '/favicon.png', type: 'image/png' }],
        meta: [
          { name: 'generator', content: Astro.generator },
          { name: 'profile:first_name', content: 'Benjamin Darius' },
          { name: 'profile:last_name', content: 'Montazer' },
        ],
      }}
    />
  </head>

  <body class="flex flex-col min-h-screen m-0 bg-base-300">
    <!-- backdrop -->
    <div class="fixed inset-0 z-0 flex justify-center sm:px-8">
      <div class="flex w-full max-w-5xl bg-gradient ring-1 ring-secondary/20"></div>
    </div>

    <header class="sticky top-0 z-50 flex justify-center sm:px-8">
      <Navbar id="navbar" class="w-full max-w-5xl transition-shadow" />
    </header>

    <main class:list={[{ prose: prose }, 'relative max-w-5xl sm:px-8 mx-auto mt-8']}>
      <div class="lg:px-8 mb-16">
        <div class="relative px-4 sm:p-8 lg:p-12">
          <!-- Content -->
          <slot />
        </div>
      </div>
    </main>

    <div class="z-10 mt-auto flex justify-center sm:px-8">
      <Footer class="w-full max-w-5xl" />
    </div>

    <div class="sticky bottom-0 z-10 sm:hidden">
      <BottomNav />
    </div>

    <script>
      window.addEventListener('scroll', () => {
        const navbar = document.querySelector('#navbar');
        const shadow = ['shadow-md', 'shadow-base-300', 'dark:shadow-base-300/50'];

        if (window.scrollY > 0) navbar?.classList.add(...shadow);
        else if (window.scrollY === 0) navbar?.classList.remove(...shadow);
      });
    </script>
  </body>
</html>
