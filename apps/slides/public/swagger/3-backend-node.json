{
  "openapi": "3.1.0",
  "info": {
    "title": "User CRUD",
    "description": "Simple user CRUD API.",
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost/api"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "User collection"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": ["user"],
        "summary": "Get all users",
        "description": "Get all entries in users collection.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "List of user object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "examples": [10]
                      },
                      "username": {
                        "type": "string",
                        "examples": ["theUser"]
                      },
                      "email": {
                        "type": "string",
                        "examples": ["john@email.com"]
                      },
                      "password": {
                        "type": "string",
                        "examples": ["12345"]
                      }
                    },
                    "required": ["id", "username", "email", "password"]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "Create a new resource in the users collection.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "examples": ["theUser"]
                  },
                  "email": {
                    "type": "string",
                    "examples": ["john@email.com"]
                  },
                  "password": {
                    "type": "string",
                    "examples": ["12345"]
                  }
                },
                "required": ["username", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [10]
                    },
                    "username": {
                      "type": "string",
                      "examples": ["theUser"]
                    },
                    "email": {
                      "type": "string",
                      "examples": ["john@email.com"]
                    },
                    "password": {
                      "type": "string",
                      "examples": ["12345"]
                    }
                  },
                  "required": ["id", "username", "email", "password"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by ID",
        "description": "",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "examples": [10]
                    },
                    "username": {
                      "type": "string",
                      "examples": ["theUser"]
                    },
                    "email": {
                      "type": "string",
                      "examples": ["john@email.com"]
                    },
                    "password": {
                      "type": "string",
                      "examples": ["12345"]
                    }
                  },
                  "required": ["id", "username", "email", "password"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied (i.e. not parsable as integer)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Replace user",
        "description": "Override a user.",
        "operationId": "replaceUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID that need to be replaced",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Replace an existent user in the database. Ensure ID is not overriden. Ignore invalid fields.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "examples": ["theUser"]
                  },
                  "email": {
                    "type": "string",
                    "examples": ["john@email.com"]
                  },
                  "password": {
                    "type": "string",
                    "examples": ["12345"]
                  }
                },
                "required": ["username", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied (i.e. not parsable as integer)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "Partially update a user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID that need to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the database. Ensure ID is not overriden. Ensure only provided fields are overriden. Ignore invalid fields.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "examples": ["theUser"]
                  },
                  "email": {
                    "type": "string",
                    "examples": ["john@email.com"]
                  },
                  "password": {
                    "type": "string",
                    "examples": ["12345"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied (i.e. not parsable as integer)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "Delete user of ID in the database.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "examples": ["E001"]
                    },
                    "message": {
                      "type": "string",
                      "examples": ["User not found"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [10]
          },
          "username": {
            "type": "string",
            "examples": ["theUser"]
          },
          "email": {
            "type": "string",
            "examples": ["john@email.com"]
          },
          "password": {
            "type": "string",
            "examples": ["12345"]
          }
        },
        "required": ["id", "username", "email", "password"]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "examples": ["theUser"]
          },
          "email": {
            "type": "string",
            "examples": ["john@email.com"]
          },
          "password": {
            "type": "string",
            "examples": ["12345"]
          }
        },
        "required": ["username", "email", "password"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "examples": ["theUser"]
          },
          "email": {
            "type": "string",
            "examples": ["john@email.com"]
          },
          "password": {
            "type": "string",
            "examples": ["12345"]
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "examples": ["E001"]
          },
          "message": {
            "type": "string",
            "examples": ["User not found"]
          }
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "examples": [10]
                  },
                  "username": {
                    "type": "string",
                    "examples": ["theUser"]
                  },
                  "email": {
                    "type": "string",
                    "examples": ["john@email.com"]
                  },
                  "password": {
                    "type": "string",
                    "examples": ["12345"]
                  }
                },
                "required": ["id", "username", "email", "password"]
              }
            }
          }
        }
      }
    }
  }
}
