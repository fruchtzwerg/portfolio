---
// Adds support for <Picture> from @astro/image until https://github.com/withastro/roadmap/discussions/598 is resolved.
// https://github.com/withastro/astro/blob/2-legacy/packages/integrations/image/components/Picture.astro

import type { AstroBuiltinAttributes, ImageOutputFormat } from 'astro';
import type { HTMLAttributes } from 'astro/types';

import { getPicture, type GetPictureResult, type TransformOptions } from './get-picture';

type GlobalHTMLAttributes = Omit<
  astroHTML.JSX.HTMLAttributes,
  keyof Omit<AstroBuiltinAttributes, 'class:list'>
>;

interface Props
  extends GlobalHTMLAttributes,
    Omit<TransformOptions, 'src'>,
    Pick<HTMLAttributes<'img'>, 'loading' | 'decoding' | 'fetchpriority'> {
  src: ImageMetadata | Promise<{ default: ImageMetadata }>;
  /** Defines an alternative text description of the image. Set to an empty string (alt="") if the image is not a key part of the content (it's decoration or a tracking pixel). */
  alt: string;
  widths: number[];
  sizes?: HTMLImageElement['sizes'];
  formats?: ImageOutputFormat[];
}

const {
  src,
  alt,
  sizes,
  widths,
  aspectRatio,
  fit,
  background,
  position,
  formats = ['avif', 'webp'],
  loading = 'lazy',
  decoding = 'async',
  ...attrs
} = Astro.props;

const { image, sources }: GetPictureResult = await getPicture({
  src,
  widths,
  formats,
  aspectRatio,
  fit,
  background,
  position,
  alt,
});

delete image.width;
delete image.height;
---

<picture>
  {sources.map(attrs => <source {...attrs} {sizes} />)}
  <img {...image} {loading} {decoding} {...attrs} />
</picture>
