---
createdAt: 2023-08-27
title: Eliminating stores with TanStack Query
tags: ['tanstack', 'ts-rest', 'api', 'rest']
summary: Remove the need for stores in your frontend with TanStack Query. Combine with ts–rest to maintain typesafety.
image: ../../assets/image/blog-tanstack-query-1.png
---

# {% $frontmatter.title %}

{% summary text=$frontmatter.summary /%}

{% leadin image=$frontmatter.image slug=$slug %}
One of the most common patterns in frontends is to fetch data from an API once, then use it across
our application. We also want to react to changes of the stored state. Redux, Pinia, NgRx and many
other state management libraries solve this problem.
{% /leadin %}

## Global state management

We need three parts to implement this pattern:

1. A way to fetch data from an API
1. A way to store the data
1. A way to react to changes of the stored data

### Fetching data

Fetching data from an API is easy. We can use `fetch()` or `axios` or any other library to do that.

```ts
const fetchUser = async (id: string) => {
  const res = await fetch(`/api/user/${id}`);
  return res.json();
};
```

### Storing data

Storing data is also easy. I will use Vue's [Pinia](https://pinia.vuejs.org/) due to its clean and
easy to understand syntax.

```ts
import { defineStore } from 'pinia';

const useUserStore = defineStore('user', {
  state: () => ({
    user: null,
  }),

  actions: {
    async fetchUser(id: string) {
      this.user = await fetchUser(id);
    },
  },
});
```

### Usage

To use the store we can simply import it and use it in our components.

```html
<template>
 {{ user.name }}
</template>

<script setup lang="ts">
  import { storeToRefs } from 'pinia';

  const store = useUserStore();
  const { fetchUser } = store;
  const { user } = storeToRefs(store);

  fetchUser('1');
</script>
```

### Managing state

So far so simple but we also need some state to go along with our fetch action.

```ts
const useUserStore = defineStore('user', {
  state: () => ({
    user: null,
    error: null,
    isLoading: false,
  }),

  getters: {
    isError: (state) => !!state.error,
  },

  actions: {
    async fetchUser(id: string) {
      this.error = null,
      this.isLoading = true;

      try {
        this.user = await fetchUser(id);
      } catch (err) {
        this.error = err;
      } finally {
        this.isLoading = false;
      }
    },
  },
});
```

{% info type="warning" %}
I'm starting to feel the pain.
{% /info %}

### Retries

Maybe we want some automatic retries in case our API or user is experiencing some temporary network
issues.

```ts
const useUserStore = defineStore('user', {
  state: () => ({
    user: null,
    error: null,
    isLoading: false,
  }),

  getters: {
    isError: (state) => !!state.error,
  },

  actions: {
    async fetchUser(id: string) {
      this.error = null,
      this.isLoading = true;

      let retries = 0;

      try {
        this.user = await fetchUser(id);
      } catch (err) {
        if(retries < 3) {
          retries++;
          return await this.fetchUser(id);
        } else {
          this.error = err;
        }
      } finally {
        this.isLoading = false;
      }
    },
  },
});
```

{% info type="danger" %}
Now I have a full on migraine. Imagine having to do this for every single API endpoint.
{% /info %}

This is pretty simple and straight forward for a single endpoint but becomes cumbersome as our
application grows.

In addition to the above implementation we would also need to test the store and its usage - see all
those branches in the final version? - We should probably test all of them.
Every change in the API requires us to update the store *and* all corresponding tests not to
mention any documentation.

It is also not immediately obvious how to scale this architecturally:

{% withClass class="prose-ul:marker-[?] prose-li:marker:text-primary" %}
- One store for every endpoint? One store
  for every REST resource collection? One store for the whole API? What if my API does not strictly
  adhere to REST?
- Do we implement actions in the store directly or do we use a service layer?
- Do we place the store close to the module it is used in or do we have a common `/src/store` module?
{% /withClass %}

## What is the actual use case?

Let's look at this again. What do we actually do here?

We have built a system that can fetch data on demand, store it and derive state. When the user
interacts with our application, we can refetch new data, override the old state and derive new.

We have built a cache.

Pinia has given us reactivity and a decent starting point for some architecture decisions
for our cache but we still had to build the logic ourselves - which means we have to test, maintain
and scale it ourselves.

### What if we could just use a cache?

This is a recurring pattern: Invoke action - update state - access getters - invalidate and refetch.

Do we really need to build this out for every single API endpoint we have?

No! Tanstack Query is a library that does exactly that.

## Tanstack Query

With [Tanstack Query](https://tanstack.com/query/latest) we define a query that takes two parameters:

1. A key that identifies the query.
1. An asynchronous function that returns data.

The query encapsulates all logic necessary to fetch the data, cache and invalidate (refetch) it.

This is what a simply query looks like:

```ts
import { useQuery } from '@tanstack/vue-query'

const useUserQuery = (id: Ref<string>) => useQuery({
  queryKey: ['user', id],
  queryFn: async () => await fetchUser(id.value),
});
```

{% info type="warning" %}
In Vue we need to pass a `Ref` to the `queryKey` to maintain reactivity so the cache is invalidated
when the `id` changes.
{% /info %}

{% info type="info" %}
There is no law that says you must use `fetch()` inside the `queryFn`. It is just a function that
returns a promise. You can do anything inside.
{% /info %}

### Installation

To facilitate the global cache we need to provide a `QueryClient` that is used to store the data.

```ts
import { VueQueryPlugin } from "@tanstack/vue-query";

app.use(VueQueryPlugin)
```

### Usage

We can then use the query in our components:

```tsx
const User = () => {
  const { data } = useUserQuery();
  return <div>{data.name}</div>;
};
```

But thats not all! We get some nice features for free:

{% withClass class="prose-ul:marker-[✓] prose-li:marker:text-success" %}
- **Reactivity** - The query will automatically refetch when the query key changes.
- **Caching** - The query will automatically cache the data and return it from the cache when
  executed with the same query key.
- **Retries** - The query will automatically retry a few times when the `queryFn` errored.
- **State** - Loading, error and success states are automatically tracked.
- And loads more…
{% /withClass %}

```tsx
const User = (id: string) => {
  const { data, isLoading, isError, error } = useUserQuery(id);

  if (isLoading) return <div>Loading…</div>;
  if (isError) return <div>Error: {error}</div>;

  return <div>{data}</div>;
};
```

## Tanstack Query with ts-rest

As previously discussed in my [ts-rest](/blog/ts-rest-thymeleaf) writeup, we can use `ts–rest` to
generate an API client from a single source of truth.

{% collapse title="A brief recap of ts-rest" open=false %}
```tsx
import { initContract, initClient } from '@ts-rest/core';
import { z } from 'zod'

// define response schema
const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string().email(),
});

// define API contract
export const contract = initContract().router({
  getUser: {
    method: 'GET',
    path: '/api/users/:id',
    pathParams: z.object({ id: z.string() }),
    responses: {
      200: UserSchema,
      404: null
    }
  },
});

// init client
const client = initClient(contract, {
  baseUrl: 'http://localhost:3000',
  baseHeaders: {},
});

// use client
const { body: user } = await client.getUser({ params: { id: '1' } });

return <div>{user.name}</div>;
```
{% /collapse %}

The `client.getUser()` function in the above example returns a promise that resolves to the user.

Neat! Our query takes async functions and caches the result - I love it when a plan comes together.

```ts
const useUserQuery = (id: Ref<string>) => useQuery({
  queryKey: ['user', id],
  queryFn: () => client.getUser({ params: { id: id.value } }),
});
```

The result `data` of the query is now correctly inferred as a `User` due to the contract.

```ts
const { data } = useUserQuery(id); // <- data is inferred as type User
```

### Framework integrations

ts–reset comes with a few framework integrations to make your life a bit easier.

```ts
import { initQueryClient } from '@ts-rest/vue-query';

export const client = initQueryClient(router, {
  baseUrl: 'http://localhost:3333',
  baseHeaders: {},
});

const { body: user } = await client.getUser.useQuery(
  ['user', id],
  () => { params: { id: id.value } } // <- now a function to make it reactive
);
```

At the time of writing [React](https://ts-rest.com/docs/react-query) is fully supported.
I've added partial support for [Vue](https://ts-rest.com/docs/vue-query) and Solid is in the works.
It's a bit trickier to do this with Angular and requires some boilerplate setup but it's perfectly
possible.
<!-- See my blog post on [ts-rest with Angular](/blog/ts-rest-angular) -->

## Conclusion

Tanstack Query allows you to dump any store or state manager that is only used for caching in your
application.

You save hours of implementation, testing and maintenance effort. Your code becomes more readable
and scales much better.

Use ts–rest to have full typesafety and let Tanstack Query do the rest.
